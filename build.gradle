buildscript {
    ext {
        springBootVersion = '2.4.5'
        springDependencyManagementVersion = '1.0.11.RELEASE'
        spotlessVersion = '5.12.5'
        sonarqubeVersion = '3.2.0'
        openApiVersion = '1.5.9'
        springCloudVersion = 'Hoxton.SR11'
        groovyVersion = '3.0.8'
        spockVersion = '1.3-groovy-2.5'
        spockReportsVersion = '1.8.0'
        testcontainersVersion = '1.15.3'
        archunitVersion = '0.19.0'
        restAssuredVersion = '4.4.0'
        javaFakerVersion = '1.0.2'
        guavaVersion = '30.1.1-jre'
        algoliaVersion = '3.14.2'
    }
}

plugins {
    id 'idea'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
    id "com.diffplug.spotless" version "$spotlessVersion"
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'org.sonarqube' version "$sonarqubeVersion"
}

version = '1.0-SNAPSHOT'
group = 'com.sportphotos'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springdoc:springdoc-openapi-ui:$openApiVersion"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "com.algolia:algoliasearch-core:$algoliaVersion"
    implementation "com.algolia:algoliasearch-java-net:$algoliaVersion"
    implementation "com.github.javafaker:javafaker:$javaFakerVersion"
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.spockframework:spock-core:$spockVersion"
    testImplementation "org.spockframework:spock-spring:$spockVersion"
    testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
    testImplementation 'org.testcontainers:mongodb'
    testImplementation "com.tngtech.archunit:archunit:$archunitVersion"
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    testImplementation "io.rest-assured:rest-assured-all:$restAssuredVersion"
    testImplementation "com.athaydes:spock-reports:$spockReportsVersion"
}

sonarqube {
    properties {
        property 'sonar.organization', 'sport-photos'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.projectKey', "Sport-Photos_$project.name"
        property 'sonar.projectName', project.name
        property 'sonar.projectVersion', version
        property 'sonar.host.url', 'https://sonarcloud.io'
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/jacoco.xml"
        property 'sonar.binaries', "$buildDir/classes"
        property 'sonar.exclusions', "file://$buildDir/**"
        property "sonar.junit.reportsPath", "$buildDir/test-results/*/TEST-*.xml"
    }
}

spotless {
    java {
        googleJavaFormat()
    }
}

sourceSets {
    test.groovy.srcDirs(
        'src/test/common',
        'src/test/unit',
        'src/test/integration',
        'src/test/functional'
    )
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/jacoco.xml")
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}